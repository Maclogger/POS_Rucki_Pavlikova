Index: Logika/simulacia.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"vietor.c\"\r\n#include \"../PosSockets/char_buffer.h\"\r\n#include \"../Utilities/generator_nahody.c\"\r\n\r\n#define KOLKO_VYDRZI_OHEN 5\r\n#define PRAVDEPODOBNOST_VETRU 25.0\r\n\r\ntypedef struct simulacia {\r\n    POLE* pole;\r\n    SMER smerVetru;\r\n    int cisloKroku;\r\n    int kolkoKratFukalVietor;\r\n    _Bool initialized;\r\n} SIMULACIA;\r\n\r\nvoid simulacia_init(SIMULACIA* sim, int pocetRiadkov, int pocetStlpcov) {\r\n    sim->pole = (POLE*) malloc(sizeof(POLE));\r\n    pole_init(sim->pole, pocetRiadkov, pocetStlpcov);\r\n    sim->smerVetru = BEZVETRIE;\r\n    sim->cisloKroku = 0;\r\n    sim->kolkoKratFukalVietor = 0;\r\n    sim->initialized = 1;\r\n}\r\n\r\nvoid simulacia_init_podla_spravy_vytvorenia(SIMULACIA* sim) {\r\n\r\n    char* token = strtok(NULL, \";\");\r\n    int pocetRiadkov = atoi(token);\r\n\r\n    token = strtok(NULL, \";\");\r\n    int pocetStlpcov = atoi(token);\r\n\r\n    simulacia_init(sim, pocetRiadkov, pocetStlpcov);\r\n\r\n    // Načítame prvky mapy\r\n    for (int r = 0; r < pocetRiadkov; r++) {\r\n        for (int s = 0; s < pocetStlpcov; s++) {\r\n            token = strtok(NULL, \";\");\r\n            if (token != NULL) {\r\n                char prvok = token[0]; // Predpokladáme, že každý prvok je jeden znak\r\n                bunka_init_with_char(&sim->pole->bunky[r][s], prvok, r, s);\r\n                sim->pole->bunky[r][s].kolkoKrokovHorela = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid simulacia_init_podla_savu(SIMULACIA* sim, CHAR_BUFFER* char_buffer) {\r\n    // \"nazovSavu;cisloKroku;smerVetru;kolkoKratFukalVietor;pocetRiadkov;pocetStlpcov;S;kolkoHorelPoziar;S;kolkoHorelPoziar;V;kolkoHorelPoziar;L;kolkoHorelPoziar;L;kolkoHorelPoziar;U;kolkoHorelPoziar;...;S;kolkoHorelPoziar;V;kolkoHorelPoziar;\"\r\n\r\n    // ignoracia nazvu:\r\n    strtok(char_buffer->data, \";\");\r\n\r\n    // cislo Kroku:\r\n    char* token = strtok(NULL, \";\");\r\n    int cisloKroku = atoi(token);\r\n\r\n    // smer vetru:\r\n    token = strtok(NULL, \";\");\r\n    char smerVetru = token[0];\r\n\r\n    // kolkokrat fukal vetrik:\r\n    token = strtok(NULL, \";\");\r\n    int kolkoKratFukalVietor = atoi(token);\r\n\r\n    // pocet riadkov:\r\n    token = strtok(NULL, \";\");\r\n    int pocetRiadkov = atoi(token);\r\n\r\n    // pocet stlpcov:\r\n    token = strtok(NULL, \";\");\r\n    int pocetStlpcov = atoi(token);\r\n\r\n    simulacia_init(sim, pocetRiadkov, pocetStlpcov);\r\n\r\n    for (int r = 0; r < pocetRiadkov; r++) {\r\n        for (int s = 0; s < pocetStlpcov; s++) {\r\n            // typ bunky:\r\n            token = strtok(NULL, \";\");\r\n            char typBunky = token[0];\r\n            bunka_init_with_char(&sim->pole->bunky[r][s], typBunky, r, s);\r\n\r\n            // pocet horeni bunky:\r\n            token = strtok(NULL, \";\");\r\n            int kolkoHorel = atoi(token);\r\n            sim->pole->bunky[r][s].kolkoKrokovHorela = kolkoHorel;\r\n        }\r\n    }\r\n\r\n    sim->cisloKroku = cisloKroku;\r\n    sim->smerVetru = get_smer_z_charu(smerVetru);\r\n    sim->kolkoKratFukalVietor = kolkoKratFukalVietor;\r\n}\r\n\r\nvoid simulacia_destroy(SIMULACIA* sim) {\r\n    if (sim->initialized) {\r\n        pole_destroy(sim->pole);\r\n        free(sim->pole);\r\n        sim->smerVetru = BEZVETRIE;\r\n    }\r\n}\r\n\r\nvoid simulacia_vypis_sa(SIMULACIA* sim) {\r\n    printf(\"\\n\\n\");\r\n    pole_vypis_sa(sim->pole);\r\n    printf(\"Aktualny vietor: \");\r\n    vypis_smer_vetra(sim->smerVetru);\r\n    printf(\"\\n\\n\\n\");\r\n}\r\n\r\nvoid simulacia_serializuj_sa(SIMULACIA *sim, CHAR_BUFFER* odpoved) {\r\n\r\n    // vracia: \"0;cisloKroku;smerVetru;pocetRiadkov;pocetStlpcov;S;S;V;L;L;U;...;S;V;\"\r\n    // smer vetru ako char iba.\r\n\r\n    //char_buffer_clear(odpoved);\r\n\r\n    char temp[50]; // Dočasný buffer na formátovanie reťazcov\r\n\r\n    // Pridáme čislo statusu OK\r\n    sprintf(temp, \"%d;\", 0);\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme číslo kroku\r\n    sprintf(temp, \"%d;\", sim->cisloKroku);\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme smer vetru ako char\r\n    temp[0] = SMER_POPISY[sim->smerVetru];\r\n    temp[1] = ';';\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme počet riadkov a stĺpcov\r\n    sprintf(temp, \"%d;%d;\", sim->pole->pocetRiadkov, sim->pole->pocetStlpcov);\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme znaky pre jednotlivé bunky\r\n    for (int r = 0; r < sim->pole->pocetRiadkov; r++) {\r\n        for (int s = 0; s < sim->pole->pocetStlpcov; s++) {\r\n            int typBunky = sim->pole->bunky[r][s].typ;\r\n            sprintf(temp, \"%c;\", TYPY_BUNKY_ZNAKY[typBunky]);\r\n            char_buffer_append(odpoved, temp, strlen(temp));\r\n        }\r\n    }\r\n}\r\n\r\nvoid simulacia_serializuj_sa_pre_save(SIMULACIA *sim, CHAR_BUFFER* odpoved) {\r\n\r\n    // vracia: \"cisloKroku;smerVetru;kolkoKratFukalVietor;pocetRiadkov;pocetStlpcov;S;kolkoHorelPoziar;S;kolkoHorelPoziar;V;kolkoHorelPoziar;L;kolkoHorelPoziar;L;kolkoHorelPoziar;U;kolkoHorelPoziar;...;S;kolkoHorelPoziar;V;kolkoHorelPoziar;\"\r\n    // smer vetru ako char iba.\r\n\r\n    //char_buffer_clear(odpoved);\r\n\r\n    char temp[50]; // Dočasný buffer na formátovanie reťazcov\r\n\r\n    // Pridáme číslo kroku\r\n    sprintf(temp, \"%d;\", sim->cisloKroku);\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme smer vetru ako char\r\n    temp[0] = SMER_POPISY[sim->smerVetru];\r\n    temp[1] = ';';\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    sprintf(temp, \"%d;\", sim->kolkoKratFukalVietor);\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme počet riadkov a stĺpcov\r\n    sprintf(temp, \"%d;%d;\", sim->pole->pocetRiadkov, sim->pole->pocetStlpcov);\r\n    char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n    // Pridáme znaky pre jednotlivé bunky\r\n    for (int r = 0; r < sim->pole->pocetRiadkov; r++) {\r\n        for (int s = 0; s < sim->pole->pocetStlpcov; s++) {\r\n            int typBunky = sim->pole->bunky[r][s].typ;\r\n            sprintf(temp, \"%c;\", TYPY_BUNKY_ZNAKY[typBunky]);\r\n            char_buffer_append(odpoved, temp, strlen(temp));\r\n\r\n            int kolkoHorel = sim->pole->bunky[r][s].kolkoKrokovHorela;\r\n            sprintf(temp, \"%d;\", kolkoHorel);\r\n            char_buffer_append(odpoved, temp, strlen(temp));\r\n        }\r\n    }\r\n}\r\n\r\nvoid simulacia_pridaj_ohen(SIMULACIA* sim) {\r\n    char* token = strtok(NULL, \";\");\r\n    int r = atoi(token);\r\n\r\n    token = strtok(NULL, \";\");\r\n    int s = atoi(token);\r\n\r\n    bunka_init(&sim->pole->bunky[r][s], POZIAR, r, s);\r\n}\r\n\r\nBUNKA* getBunkuOkolia(POLE* pole, BUNKA* stred, int poradoveCislo) {\r\n\r\n    int rStred = stred->r;\r\n    int sStred = stred->s;\r\n\r\n    switch(poradoveCislo) {\r\n        case 0: {\r\n            // hore\r\n            if (rStred - 1 >= 0) {\r\n                return &pole->bunky[rStred - 1][sStred];\r\n            }\r\n        }\r\n        case 1: {\r\n            // dole\r\n            if (rStred + 1 < pole->pocetRiadkov) {\r\n                return &pole->bunky[rStred + 1][sStred];\r\n            }\r\n        }\r\n        case 2: {\r\n            // doprava\r\n            if (sStred + 1 < pole->pocetStlpcov) {\r\n                return &pole->bunky[rStred][sStred + 1];\r\n            }\r\n        }\r\n        case 3: {\r\n            // doľava\r\n            if (sStred - 1 >= 0) {\r\n                return &pole->bunky[rStred][sStred - 1];\r\n            }\r\n        }\r\n    }\r\n    return NULL;\r\n}\r\n\r\n_Bool vykonaj_krok(SIMULACIA* sim) {\r\n    sim->cisloKroku++;\r\n\r\n    POLE* kopia = (POLE*)malloc(sizeof(POLE));\r\n    pole_copy(kopia, sim->pole);\r\n\r\n\r\n    // požiar a zhorene:\r\n    for (int r = 0; r < kopia->pocetRiadkov; r++) {\r\n        for (int s = 0; s < kopia->pocetStlpcov; s++) {\r\n            BUNKA* stredKopia = &kopia->bunky[r][s];\r\n            BUNKA* stred = &sim->pole->bunky[r][s];\r\n            if (stredKopia->typ == POZIAR) {\r\n                for (int i = 0; i < 4; i++) {\r\n                    BUNKA* bunkaOkoliaKopia = getBunkuOkolia(kopia, stredKopia, i);\r\n                    BUNKA* bunkaOkolia = getBunkuOkolia(sim->pole, stred, i);\r\n                    if (bunkaOkoliaKopia != NULL) {\r\n                        // je v rámci mapy:\r\n                        if (bunkaOkoliaKopia->typ == LES || bunkaOkoliaKopia->typ == LUKA) {\r\n                            if (sim->smerVetru == BEZVETRIE) {\r\n                                if (getRandomDouble(0.0, 100.0) < 20.0) {\r\n                                    bunkaOkolia->typ = POZIAR;\r\n                                }\r\n                            } else {\r\n                                // ak veje vietor:\r\n                                if ((i == 0 && sim->smerVetru == SEVER) ||\r\n                                        (i == 1 && sim->smerVetru == JUH) ||\r\n                                        (i == 2 && sim->smerVetru == VYCHOD) ||\r\n                                        (i == 3 && sim->smerVetru == ZAPAD)) {\r\n\r\n                                    if (getRandomDouble(0.0, 100.0) < 90.0) {\r\n                                        bunkaOkolia->typ = POZIAR;\r\n                                    }\r\n                                } else {\r\n                                    if (getRandomDouble(0.0, 100.0) < 2.0) {\r\n                                        bunkaOkolia->typ = POZIAR;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if ((stred->kolkoKrokovHorela >= KOLKO_VYDRZI_OHEN) && (getRandomDouble(0,100.0) < 50.0)) {\r\n                    stred->typ = ZHORENA;\r\n                    stred->kolkoKrokovHorela = 0;\r\n                }\r\n            }\r\n            else if (stredKopia->typ == ZHORENA) {\r\n                for (int i = 0; i < 4; i++) {\r\n                    BUNKA* okolnaKopia = getBunkuOkolia(kopia, stredKopia, i);\r\n                    if (okolnaKopia != NULL && okolnaKopia->typ == VODA) {\r\n                        if (getRandomDouble(0.0, 100.0) < 10.0) {\r\n                            stred->typ = LUKA;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (stred->typ == LUKA) {\r\n                for (int i = 0; i < 4; i++) {\r\n                    BUNKA* okolnaKopia = getBunkuOkolia(kopia, stredKopia, i);\r\n                    if (okolnaKopia != NULL && okolnaKopia->typ == LES) {\r\n                        if (getRandomDouble(0.0, 100.0) < 2.0) {\r\n                            stred->typ = LES;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            aktualizujSa(stred);\r\n        }\r\n    }\r\n\r\n    // smer vetru:\r\n    if (sim->smerVetru == BEZVETRIE) {\r\n        if (getRandomDouble(0.0, 100.0) < PRAVDEPODOBNOST_VETRU) {\r\n            sim->smerVetru = getRandomSmerVetru();\r\n        }\r\n    } else {\r\n        if (sim->kolkoKratFukalVietor < 3) {\r\n            sim->kolkoKratFukalVietor++;\r\n        } else {\r\n            if (getRandomDouble(0.0, 100.0) < PRAVDEPODOBNOST_VETRU) {\r\n                SMER novySmer = getRandomSmerVetru();\r\n                if (novySmer == sim->smerVetru) {\r\n                    sim->kolkoKratFukalVietor++;\r\n                } else {\r\n                    sim->kolkoKratFukalVietor = 0;\r\n                }\r\n            } else {\r\n                sim->smerVetru = BEZVETRIE;\r\n                sim->kolkoKratFukalVietor = 0;\r\n            }\r\n        }\r\n    }\r\n    pole_destroy(kopia);\r\n    free(kopia);\r\n    return 1;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Logika/simulacia.c b/Logika/simulacia.c
--- a/Logika/simulacia.c	
+++ b/Logika/simulacia.c	
@@ -269,7 +269,7 @@
                         }
                     }
                 }
-                if ((stred->kolkoKrokovHorela >= KOLKO_VYDRZI_OHEN) && (getRandomDouble(0,100.0) < 50.0)) {
+                if ((stred->kolkoKrokovHorela >= KOLKO_VYDRZI_OHEN) && (getRandomDouble(0,100.0) < 30.0)) {
                     stred->typ = ZHORENA;
                     stred->kolkoKrokovHorela = 0;
                 }
Index: .idea/other.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/other.xml b/.idea/other.xml
deleted file mode 100644
--- a/.idea/other.xml	
+++ /dev/null	
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AutoUploadManager">
-    <option name="hosts">
-      <list>
-        <option value="dc93d8b8-ce61-42e0-9a9c-a3b4d7be0d20" />
-      </list>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/deployment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"PublishConfigData\" remoteFilesAllowedToDisappearOnAutoupload=\"false\">\r\n    <serverData>\r\n      <paths name=\"Frios (dc93d8b8-ce61-42e0-9a9c-a3b4d7be0d20)\">\r\n        <serverdata>\r\n          <mappings>\r\n            <mapping deploy=\"/tmp/tmp.KPY0jxrcz3\" local=\"$PROJECT_DIR$\" />\r\n          </mappings>\r\n          <excludedPaths>\r\n            <excludedPath local=\"true\" path=\"$PROJECT_DIR$/cmake-build-frios\" />\r\n          </excludedPaths>\r\n        </serverdata>\r\n      </paths>\r\n    </serverData>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deployment.xml b/.idea/deployment.xml
--- a/.idea/deployment.xml	
+++ b/.idea/deployment.xml	
@@ -2,14 +2,11 @@
 <project version="4">
   <component name="PublishConfigData" remoteFilesAllowedToDisappearOnAutoupload="false">
     <serverData>
-      <paths name="Frios (dc93d8b8-ce61-42e0-9a9c-a3b4d7be0d20)">
+      <paths name="frios (f01bc23d-aff3-419e-828d-5c73ec441c2d)">
         <serverdata>
           <mappings>
-            <mapping deploy="/tmp/tmp.KPY0jxrcz3" local="$PROJECT_DIR$" />
+            <mapping deploy="/tmp/tmp.J6zpReYFX8" local="$PROJECT_DIR$" />
           </mappings>
-          <excludedPaths>
-            <excludedPath local="true" path="$PROJECT_DIR$/cmake-build-frios" />
-          </excludedPaths>
         </serverdata>
       </paths>
     </serverData>
